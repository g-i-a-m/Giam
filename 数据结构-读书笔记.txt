1>.数据结构相关概念
	●数据结构:是指数据之间的相互关系,即数据的组织形式,一般包括3个方面:逻辑结构,存储结构及对数据的运算.
	●数据的逻辑结构可以看作是从具体问题抽象出来的数学模型,与数据的物理存储无关;通常把数据的逻辑结构简称为数据结构.
	●数据的运算是定义在数据的逻辑结构上的,每种逻辑结构都有一个运算的集合(i.g. 增 删 改 查 排序).
	●数据的逻辑结构有2类:
		线性结构:有且仅有一个开始节点和终端节点,并且每个节点最多只有一个直接前驱和一个直接后驱.
		非线性结构:一个节点可能有多个直接前驱和后驱.
	●数据的存储结构分4类:
		顺序存储:把逻辑上相邻的节点存储在物理上相邻的存储单元里,节点间的逻辑关系由存储单元的邻接关系来体现.
		链接存储:逻辑上相邻的节点不要求物理存储位置相邻,节点间的逻辑关系由附加的指针表示.
		索引存储:通常在存储节点的同时建立附加的索引表;索引表关键字字段用于标识节点,地址字段用于指向对应节点存储位置.
				 每个节点对应一个索引项成为稠密索引,一组节点对应一个索引项成为稀疏索引.
		哈希(散列)存储:根据节点关键字直接计算出节点的存储位置.
	●通常将同一逻辑结构但不同存储结构称为不同的名称,e.g. 线性表为逻辑结构,采用顺序存储则称为顺序表,采用链接存储称为
		链表,采用散列存储则称为散列表.
	●通常将同一逻辑结构和存储结构,但不同运算集合及其运算性质的不同导致不同的数据结构,e.g. 对线性表上的插入删除限制在
		表的一端进行则称为栈;对插入限制在表的一端,删除限制在表的另一端则称为队列.
2>.线性表







3>.栈和队列






4>.串
	串的逻辑结构和线性表极为相似,区别在于串的数据对象约束为字符集.
	●KMP模式匹配算法:通过部分匹配表(PMT)跳过已经比较过的位置再继续比较,以避免重复比较提高效率.
		大白话:根据已经比较过的字符,如果模式子串(模式串已比较过的部分)的尾部存在和头部相同的部分,
			则跳过'已匹配长度-头尾相同部分的长度',这样既跳过了不同部分又可以直接从相同部分之后开始比较,完全避免了同
			一个字符被比较多次的情况;
		部分匹配表:表中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度. 计算部分匹配表(PMT)核心思想是拆分模式
			串为前1个字符,前2个字符至全部字符,分别找出每个子模式串的首尾最长相同部分的长度,这个长度就是部分匹配表对
			应位的值.
	●Boyer-Moore算法:




















时间复杂度及空间复杂度计算:
递归转循环技巧: